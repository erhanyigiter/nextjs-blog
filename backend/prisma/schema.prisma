// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LanguageCode {
  TR
  EN
  DE
  FR
  ES
  AR
}

model Language {
  id        String       @id @default(uuid())
  code      LanguageCode @unique
  name      String       @unique
  nativeName String
  isActive  Boolean      @default(true)
  isDefault Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  posts PostTranslation[]
  categories CategoryTranslation[]
  tags TagTranslation[]
  staticPages StaticPageTranslation[]

  @@map("languages")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  password      String
  firstName     String?
  lastName      String?
  avatar        String?
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  posts Post[]
  media Media[]
  staticPages StaticPage[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]
  translations CategoryTranslation[]

  @@map("categories")
}

model CategoryTranslation {
  id         String   @id @default(uuid())
  categoryId String
  languageId String
  name       String
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([categoryId, languageId])
  @@map("category_translations")
}

model Tag {
  id        String   @id @default(uuid())
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]
  translations TagTranslation[]

  @@map("tags")
}

model TagTranslation {
  id        String   @id @default(uuid())
  tagId     String
  languageId String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([tagId, languageId])
  @@map("tag_translations")
}

model Post {
  id            String     @id @default(uuid())
  slug          String     @unique
  featuredImage String?
  status        PostStatus @default(DRAFT)
  publishedAt   DateTime?
  readTime      Int?
  viewCount     Int        @default(0)
  likeCount     Int        @default(0)
  authorId      String
  categoryId    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  comments  Comment[]
  tags      PostTag[]
  translations PostTranslation[]

  @@map("posts")
}

model PostTranslation {
  id        String   @id @default(uuid())
  postId    String
  languageId String
  title     String
  content   String
  excerpt   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([postId, languageId])
  @@map("post_translations")
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  isApproved    Boolean  @default(false)
  authorName    String
  authorEmail   String
  authorWebsite String?
  postId        String
  parentId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model PostTag {
  postId String
  tagId  String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Media {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  uploadedBy  String
  createdAt   DateTime @default(now())

  // Relations
  uploader User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("media")
}

model Setting {
  id          String      @id @default(uuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?
  updatedAt   DateTime    @updatedAt

  @@map("settings")
}

model StaticPage {
  id          String     @id @default(uuid())
  slug        String     @unique
  status      PageStatus @default(DRAFT)
  publishedAt DateTime?
  viewCount   Int        @default(0)
  authorId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  translations StaticPageTranslation[]

  @@map("static_pages")
}

model StaticPageTranslation {
  id              String   @id @default(uuid())
  staticPageId    String
  languageId      String
  title           String
  content         String
  excerpt         String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  staticPage StaticPage @relation(fields: [staticPageId], references: [id], onDelete: Cascade)
  language   Language   @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([staticPageId, languageId])
  @@map("static_page_translations")
}
