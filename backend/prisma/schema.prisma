// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  password      String
  firstName     String?
  lastName      String?
  avatar        String?
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  posts Post[]
  media Media[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  slug          String     @unique
  excerpt       String?
  content       String
  featuredImage String?
  status        PostStatus @default(DRAFT)
  publishedAt   DateTime?
  readTime      Int?
  viewCount     Int        @default(0)
  likeCount     Int        @default(0)
  authorId      String
  categoryId    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  comments  Comment[]
  tags      PostTag[]

  @@map("posts")
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  isApproved    Boolean  @default(false)
  authorName    String
  authorEmail   String
  authorWebsite String?
  postId        String
  parentId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model PostTag {
  postId String
  tagId  String
  createdAt DateTime @default(now())

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Media {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  uploadedBy  String
  createdAt   DateTime @default(now())

  // Relations
  uploader User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("media")
}

model Setting {
  id          String      @id @default(uuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?
  updatedAt   DateTime    @updatedAt

  @@map("settings")
}
